name: CI-CD Pipeline

on:
  push:
    branches:
      - deploytesting
      - main
      - testcicd
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Notify Slack – Deployment Started
      - name: Notify Slack – Deployment Started
        uses: slackapi/slack-github-action@v1.27.0
        with:
          slack-bot-token: ${{ secrets.SLACK_WEBHOOK_URL }}
          channel-id: "ci-cd-notifications" # Replace with your Slack channel name
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":rocket: *Deployment Started* for *${{ github.repository }}* on branch *${{ github.ref_name }}*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Repository:*\n${{ github.repository }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Run ID:*\n${{ github.run_id }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n${{ github.sha }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Committer:*\n${{ github.actor }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run on GitHub>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOKS

      # Step 2: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 3: Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.1"

      # Step 4: Install Go dependencies
      - name: Install dependencies
        run: go mod download

      # Step 5: Run Go vet to check for code issues
      - name: Run go vet
        run: go vet ./...

      # Step 6: Build the Go binary
      - name: Build binary
        run: |
          GOOS=linux GOARCH=amd64 go build -o problemchallengeservice ./cmd

      # Step 7: Upload binary, copy .env, and restart service on EC2
      - name: Deploy to EC2
        env:
          SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_SERVER_IP }}
        run: |
          printf "%s" "$SSH_KEY" > ssh_key.pem
          chmod 600 ssh_key.pem
          scp -o StrictHostKeyChecking=no -i ssh_key.pem problemchallengeservice ubuntu@$EC2_HOST:/tmp/problemchallengeservice
          ssh -o StrictHostKeyChecking=no -i ssh_key.pem ubuntu@$EC2_HOST '
            sudo systemctl stop problemchallenge.service || true &&
            sudo mv /tmp/problemchallengeservice /usr/local/bin/problemchallengeservice &&
            sudo chmod +x /usr/local/bin/problemchallengeservice &&
            [ -f /home/ubuntu/.env ] && sudo cp /home/ubuntu/.env /usr/local/bin/.env || echo "Warning: /home/ubuntu/.env not found" &&
            sudo chmod 600 /usr/local/bin/.env &&
            sudo chown ubuntu:ubuntu /usr/local/bin/.env &&

            sudo mkdir -p /var/log/service &&
            sudo touch /var/log/service/problemchallengeservice.log &&
            sudo chown ubuntu:ubuntu /var/log/service/problemchallengeservice.log &&
            sudo chmod 664 /var/log/service/problemchallengeservice.log &&

            sudo systemctl restart problemchallenge.service &&
            sudo systemctl status problemchallenge.service
          '
          rm -f ssh_key.pem

      # Step 8: Notify Slack – Deployment Successful
      - name: Notify Slack – Deployment Successful
        if: success()
        uses: slackapi/slack-github-action@v1.27.0
        with:
          slack-bot-token: ${{ secrets.SLACK_WEBHOOK_URL }}
          channel-id: "ci-cd-notifications" # Replace with your Slack channel name
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":white_check_mark: *Deployment Succeeded* for *${{ github.repository }}* on branch *${{ github.ref_name }}*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Repository:*\n${{ github.repository }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Run ID:*\n${{ github.run_id }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n${{ github.sha }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Committer:*\n${{ github.actor }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run on GitHub>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOKS

      # Step 9: Notify Slack – Deployment Failed
      - name: Notify Slack – Deployment Failed
        if: failure()
        uses: slackapi/slack-github-action@v1.27.0
        with:
          slack-bot-token: ${{ secrets.SLACK_WEBHOOK_URL }}
          channel-id: "ci-cd-notifications" # Replace with your Slack channel name
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":x: *Deployment Failed* for *${{ github.repository }}* on branch *${{ github.ref_name }}*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Repository:*\n${{ github.repository }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Run ID:*\n${{ github.run_id }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n${{ github.sha }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Committer:*\n${{ github.actor }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run on GitHub>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOKS
